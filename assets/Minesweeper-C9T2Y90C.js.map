{"version":3,"file":"Minesweeper-C9T2Y90C.js","sources":["../../src/components/Minesweeper.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport './Minesweeper.css';\n\ninterface Cell {\n  row: number;\n  col: number;\n  isMine: boolean;\n  isRevealed: boolean;\n  isFlagged: boolean;\n  neighborMines: number;\n}\n\ninterface GameState {\n  board: Cell[][];\n  gameStatus: 'playing' | 'won' | 'lost';\n  mineCount: number;\n  flagCount: number;\n  startTime: number;\n  elapsedTime: number;\n}\n\nconst Minesweeper: React.FC = () => {\n  const BOARD_SIZE = 16;\n  const MINE_COUNT = 40;\n  \n  const [gameState, setGameState] = useState<GameState>({\n    board: [],\n    gameStatus: 'playing',\n    mineCount: MINE_COUNT,\n    flagCount: 0,\n    startTime: 0,\n    elapsedTime: 0\n  });\n\n  // Initialize the game board\n  const initializeBoard = useCallback((): Cell[][] => {\n    const board: Cell[][] = [];\n    \n    // Create empty board\n    for (let row = 0; row < BOARD_SIZE; row++) {\n      board[row] = [];\n      for (let col = 0; col < BOARD_SIZE; col++) {\n        board[row][col] = {\n          row,\n          col,\n          isMine: false,\n          isRevealed: false,\n          isFlagged: false,\n          neighborMines: 0\n        };\n      }\n    }\n    \n    // Place mines randomly\n    let minesPlaced = 0;\n    while (minesPlaced < MINE_COUNT) {\n      const row = Math.floor(Math.random() * BOARD_SIZE);\n      const col = Math.floor(Math.random() * BOARD_SIZE);\n      \n      if (!board[row][col].isMine) {\n        board[row][col].isMine = true;\n        minesPlaced++;\n      }\n    }\n    \n    // Calculate neighbor mine counts\n    for (let row = 0; row < BOARD_SIZE; row++) {\n      for (let col = 0; col < BOARD_SIZE; col++) {\n        if (!board[row][col].isMine) {\n          let count = 0;\n          for (let i = -1; i <= 1; i++) {\n            for (let j = -1; j <= 1; j++) {\n              const newRow = row + i;\n              const newCol = col + j;\n              if (newRow >= 0 && newRow < BOARD_SIZE && \n                  newCol >= 0 && newCol < BOARD_SIZE && \n                  board[newRow][newCol].isMine) {\n                count++;\n              }\n            }\n          }\n          board[row][col].neighborMines = count;\n        }\n      }\n    }\n    \n    return board;\n  }, []);\n\n  // Start new game\n  const startNewGame = useCallback(() => {\n    const board = initializeBoard();\n    setGameState({\n      board,\n      gameStatus: 'playing',\n      mineCount: MINE_COUNT,\n      flagCount: 0,\n      startTime: Date.now(),\n      elapsedTime: 0\n    });\n  }, [initializeBoard]);\n\n  // Initialize game on component mount\n  useEffect(() => {\n    startNewGame();\n  }, [startNewGame]);\n\n  // Update timer\n  useEffect(() => {\n    if (gameState.gameStatus === 'playing' && gameState.startTime > 0) {\n      const timer = setInterval(() => {\n        setGameState(prev => ({\n          ...prev,\n          elapsedTime: Math.floor((Date.now() - prev.startTime) / 1000)\n        }));\n      }, 1000);\n      return () => clearInterval(timer);\n    }\n  }, [gameState.gameStatus, gameState.startTime]);\n\n  // Reveal cell and adjacent cells if empty\n  const revealCell = useCallback((row: number, col: number) => {\n    if (gameState.gameStatus !== 'playing') return;\n    \n    const cell = gameState.board[row][col];\n    if (cell.isRevealed || cell.isFlagged) return;\n    \n    const newBoard = gameState.board.map(row => row.map(cell => ({ ...cell })));\n    \n    if (cell.isMine) {\n      // Game over - reveal all mines\n      newBoard[row][col].isRevealed = true;\n      for (let r = 0; r < BOARD_SIZE; r++) {\n        for (let c = 0; c < BOARD_SIZE; c++) {\n          if (newBoard[r][c].isMine) {\n            newBoard[r][c].isRevealed = true;\n          }\n        }\n      }\n      setGameState(prev => ({\n        ...prev,\n        board: newBoard,\n        gameStatus: 'lost'\n      }));\n      return;\n    }\n    \n    // Reveal cell\n    newBoard[row][col].isRevealed = true;\n    \n    // If empty cell, reveal neighbors\n    if (cell.neighborMines === 0) {\n      const queue = [{ row, col }];\n      while (queue.length > 0) {\n        const { row: currentRow, col: currentCol } = queue.shift()!;\n        \n        for (let i = -1; i <= 1; i++) {\n          for (let j = -1; j <= 1; j++) {\n            const newRow = currentRow + i;\n            const newCol = currentCol + j;\n            \n            if (newRow >= 0 && newRow < BOARD_SIZE && \n                newCol >= 0 && newCol < BOARD_SIZE && \n                !newBoard[newRow][newCol].isRevealed && \n                !newBoard[newRow][newCol].isFlagged) {\n              \n              newBoard[newRow][newCol].isRevealed = true;\n              \n              if (newBoard[newRow][newCol].neighborMines === 0) {\n                queue.push({ row: newRow, col: newCol });\n              }\n            }\n          }\n        }\n      }\n    }\n    \n    // Check if game is won\n    const totalCells = BOARD_SIZE * BOARD_SIZE;\n    const revealedCells = newBoard.flat().filter(cell => cell.isRevealed).length;\n    \n    if (revealedCells === totalCells - MINE_COUNT) {\n      setGameState(prev => ({\n        ...prev,\n        board: newBoard,\n        gameStatus: 'won'\n      }));\n      return;\n    }\n    \n    setGameState(prev => ({\n      ...prev,\n      board: newBoard\n    }));\n  }, [gameState.board, gameState.gameStatus]);\n\n  // Toggle flag on cell\n  const toggleFlag = useCallback((row: number, col: number, e: React.MouseEvent) => {\n    e.preventDefault();\n    if (gameState.gameStatus !== 'playing') return;\n    \n    const cell = gameState.board[row][col];\n    if (cell.isRevealed) return;\n    \n    const newBoard = gameState.board.map(row => row.map(cell => ({ ...cell })));\n    newBoard[row][col].isFlagged = !newBoard[row][col].isFlagged;\n    \n    const flagCount = newBoard.flat().filter(cell => cell.isFlagged).length;\n    \n    setGameState(prev => ({\n      ...prev,\n      board: newBoard,\n      flagCount\n    }));\n  }, [gameState.board, gameState.gameStatus]);\n\n  // Get cell display content\n  const getCellContent = (cell: Cell) => {\n    if (cell.isFlagged) return 'ðŸš©';\n    if (!cell.isRevealed) return '';\n    if (cell.isMine) return 'ðŸ’£';\n    if (cell.neighborMines === 0) return '';\n    return cell.neighborMines;\n  };\n\n  // Get cell CSS class\n  const getCellClass = (cell: Cell) => {\n    let className = 'minesweeper-cell';\n    if (cell.isRevealed) {\n      className += ' revealed';\n      if (cell.isMine) {\n        className += ' mine';\n      } else if (cell.neighborMines > 0) {\n        className += ` number-${cell.neighborMines}`;\n      } else {\n        className += ' empty';\n      }\n    } else {\n      className += ' hidden';\n      if (cell.isFlagged) {\n        className += ' flagged';\n      }\n    }\n    return className;\n  };\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  return (\n    <div className=\"minesweeper-container\">\n      <div className=\"minesweeper-header\">\n        <div className=\"game-info\">\n          <div className=\"info-item\">\n            <span className=\"info-label\">Mines:</span>\n            <span className=\"info-value\">{gameState.mineCount - gameState.flagCount}</span>\n          </div>\n          <div className=\"info-item\">\n            <span className=\"info-label\">Time:</span>\n            <span className=\"info-value\">{formatTime(gameState.elapsedTime)}</span>\n          </div>\n        </div>\n        <div className=\"game-status\">\n          <button className=\"new-game-btn\" onClick={startNewGame}>\n            {gameState.gameStatus === 'playing' ? 'ðŸ˜Š' : \n             gameState.gameStatus === 'won' ? 'ðŸ˜Ž' : 'ðŸ˜µ'}\n          </button>\n        </div>\n      </div>\n      \n      <div className=\"minesweeper-board\">\n        {gameState.board.map((row, rowIndex) => (\n          <div key={rowIndex} className=\"minesweeper-row\">\n            {row.map((cell, colIndex) => (\n              <div\n                key={`${rowIndex}-${colIndex}`}\n                className={getCellClass(cell)}\n                onClick={() => revealCell(rowIndex, colIndex)}\n                onContextMenu={(e) => toggleFlag(rowIndex, colIndex, e)}\n              >\n                {getCellContent(cell)}\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n      \n      <div className=\"minesweeper-footer\">\n        {gameState.gameStatus === 'won' && (\n          <div className=\"game-message win\">ðŸŽ‰ Congratulations! You won! ðŸŽ‰</div>\n        )}\n        {gameState.gameStatus === 'lost' && (\n          <div className=\"game-message lose\">ðŸ’¥ Game Over! Try again! ðŸ’¥</div>\n        )}\n        <div className=\"game-instructions\">\n          <p>Left click to reveal â€¢ Right click to flag â€¢ Click ðŸ˜Š to restart</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Minesweeper;\n"],"names":["Minesweeper","gameState","setGameState","useState","initializeBoard","useCallback","board","row","col","minesPlaced","count","i","j","newRow","newCol","startNewGame","useEffect","timer","prev","revealCell","cell","newBoard","r","c","queue","currentRow","currentCol","totalCells","toggleFlag","e","flagCount","getCellContent","getCellClass","className","formatTime","seconds","mins","secs","jsxs","jsx","rowIndex","colIndex"],"mappings":"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"}