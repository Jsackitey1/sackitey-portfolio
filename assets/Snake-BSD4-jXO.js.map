{"version":3,"file":"Snake-BSD4-jXO.js","sources":["../../src/components/Snake.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport './Snake.css';\n\ninterface Position {\n  x: number;\n  y: number;\n}\n\ninterface GameState {\n  snake: Position[];\n  food: Position;\n  direction: 'up' | 'down' | 'left' | 'right';\n  gameRunning: boolean;\n  score: number;\n  gameOver: boolean;\n}\n\nconst Snake: React.FC = () => {\n  const gameRef = useRef<NodeJS.Timeout | undefined>(undefined);\n  \n  const BOARD_WIDTH = 20;\n  const BOARD_HEIGHT = 15;\n  const INITIAL_SNAKE = [{ x: 10, y: 7 }, { x: 9, y: 7 }, { x: 8, y: 7 }];\n\n  const [gameState, setGameState] = useState<GameState>({\n    snake: INITIAL_SNAKE,\n    food: { x: 15, y: 7 },\n    direction: 'right',\n    gameRunning: false,\n    score: 0,\n    gameOver: false\n  });\n\n  const generateFood = useCallback((): Position => {\n    let newFood: Position;\n    do {\n      newFood = {\n        x: Math.floor(Math.random() * BOARD_WIDTH),\n        y: Math.floor(Math.random() * BOARD_HEIGHT)\n      };\n    } while (gameState.snake.some(segment => segment.x === newFood.x && segment.y === newFood.y));\n    \n    return newFood;\n  }, [gameState.snake]);\n\n  const moveSnake = useCallback(() => {\n    if (!gameState.gameRunning || gameState.gameOver) return;\n\n    setGameState(prev => {\n      const newSnake = [...prev.snake];\n      const head = { ...newSnake[0] };\n\n      // Move head based on direction\n      switch (prev.direction) {\n        case 'up':\n          head.y -= 1;\n          break;\n        case 'down':\n          head.y += 1;\n          break;\n        case 'left':\n          head.x -= 1;\n          break;\n        case 'right':\n          head.x += 1;\n          break;\n      }\n\n      // Check wall collision\n      if (head.x < 0 || head.x >= BOARD_WIDTH || head.y < 0 || head.y >= BOARD_HEIGHT) {\n        return { ...prev, gameRunning: false, gameOver: true };\n      }\n\n      // Check self collision\n      if (newSnake.some(segment => segment.x === head.x && segment.y === head.y)) {\n        return { ...prev, gameRunning: false, gameOver: true };\n      }\n\n      newSnake.unshift(head);\n\n      // Check food collision\n      if (head.x === prev.food.x && head.y === prev.food.y) {\n        // Food eaten, don't remove tail\n        const newFood = generateFood();\n        return {\n          ...prev,\n          snake: newSnake,\n          food: newFood,\n          score: prev.score + 10\n        };\n      } else {\n        // No food, remove tail\n        newSnake.pop();\n      }\n\n      return { ...prev, snake: newSnake };\n    });\n  }, [gameState.gameRunning, gameState.gameOver, gameState.direction, generateFood]);\n\n  // Game loop\n  useEffect(() => {\n    if (gameState.gameRunning && !gameState.gameOver) {\n      const gameSpeed = Math.max(100, 200 - gameState.score * 2);\n      gameRef.current = setTimeout(moveSnake, gameSpeed);\n    }\n\n    return () => {\n      if (gameRef.current) {\n        clearTimeout(gameRef.current);\n      }\n    };\n  }, [gameState.gameRunning, gameState.gameOver, gameState.snake, gameState.score, moveSnake]);\n\n  // Handle keyboard input\n  useEffect(() => {\n    const handleKeyPress = (e: KeyboardEvent) => {\n      setGameState(prev => {\n        const newState = { ...prev };\n\n        switch (e.key.toLowerCase()) {\n          case 'arrowup':\n          case 'w':\n            if (prev.direction !== 'down') {\n              newState.direction = 'up';\n              if (!prev.gameRunning && !prev.gameOver) {\n                newState.gameRunning = true;\n              }\n            }\n            break;\n          case 'arrowdown':\n          case 's':\n            if (prev.direction !== 'up') {\n              newState.direction = 'down';\n              if (!prev.gameRunning && !prev.gameOver) {\n                newState.gameRunning = true;\n              }\n            }\n            break;\n          case 'arrowleft':\n          case 'a':\n            if (prev.direction !== 'right') {\n              newState.direction = 'left';\n              if (!prev.gameRunning && !prev.gameOver) {\n                newState.gameRunning = true;\n              }\n            }\n            break;\n          case 'arrowright':\n          case 'd':\n            if (prev.direction !== 'left') {\n              newState.direction = 'right';\n              if (!prev.gameRunning && !prev.gameOver) {\n                newState.gameRunning = true;\n              }\n            }\n            break;\n          case ' ':\n            if (prev.gameOver) {\n              // Restart game\n              return {\n                snake: INITIAL_SNAKE,\n                food: generateFood(),\n                direction: 'right',\n                gameRunning: true,\n                score: 0,\n                gameOver: false\n              };\n            } else {\n              newState.gameRunning = !newState.gameRunning;\n            }\n            break;\n        }\n\n        return newState;\n      });\n    };\n\n    window.addEventListener('keydown', handleKeyPress);\n    return () => window.removeEventListener('keydown', handleKeyPress);\n  }, [generateFood]);\n\n  const startNewGame = () => {\n    setGameState({\n      snake: INITIAL_SNAKE,\n      food: generateFood(),\n      direction: 'right',\n      gameRunning: true,\n      score: 0,\n      gameOver: false\n    });\n  };\n\n  const togglePause = () => {\n    if (!gameState.gameOver) {\n      setGameState(prev => ({\n        ...prev,\n        gameRunning: !prev.gameRunning\n      }));\n    }\n  };\n\n  return (\n    <div className=\"snake-container\">\n      <div className=\"snake-header\">\n        <h3>Snake</h3>\n        <div className=\"snake-controls\">\n          <div className=\"score\">Score: {gameState.score}</div>\n          <button onClick={startNewGame}>New Game</button>\n          <button onClick={togglePause} disabled={gameState.gameOver}>\n            {gameState.gameRunning ? 'Pause' : 'Resume'}\n          </button>\n        </div>\n      </div>\n      \n      <div className=\"snake-game\">\n        <div className=\"snake-board\">\n          {Array.from({ length: BOARD_HEIGHT }, (_, y) => (\n            <div key={y} className=\"snake-row\">\n              {Array.from({ length: BOARD_WIDTH }, (_, x) => {\n                const isSnake = gameState.snake.some(segment => segment.x === x && segment.y === y);\n                const isHead = gameState.snake[0]?.x === x && gameState.snake[0]?.y === y;\n                const isFood = gameState.food.x === x && gameState.food.y === y;\n                \n                let cellClass = 'snake-cell';\n                if (isHead) cellClass += ' snake-head';\n                else if (isSnake) cellClass += ' snake-body';\n                else if (isFood) cellClass += ' snake-food';\n                \n                return <div key={x} className={cellClass} />;\n              })}\n            </div>\n          ))}\n        </div>\n        \n        {!gameState.gameRunning && !gameState.gameOver && (\n          <div className=\"snake-overlay\">\n            <div className=\"game-message\">\n              <p>Press any arrow key or WASD to start!</p>\n            </div>\n          </div>\n        )}\n        \n        {gameState.gameOver && (\n          <div className=\"snake-overlay\">\n            <div className=\"game-message game-over\">\n              <h4>Game Over!</h4>\n              <p>Final Score: {gameState.score}</p>\n              <p>Press SPACE to restart</p>\n            </div>\n          </div>\n        )}\n      </div>\n      \n      <div className=\"snake-instructions\">\n        <p><strong>Controls:</strong></p>\n        <p>• Arrow keys or WASD to move</p>\n        <p>• SPACE to pause/resume</p>\n        <p>• Eat red food to grow and score!</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Snake;\n"],"names":["Snake","gameRef","useRef","BOARD_WIDTH","BOARD_HEIGHT","INITIAL_SNAKE","gameState","setGameState","useState","generateFood","useCallback","newFood","segment","moveSnake","prev","newSnake","head","useEffect","gameSpeed","handleKeyPress","e","newState","startNewGame","togglePause","jsxs","jsx","_","y","x","isSnake","isHead","_a","_b","isFood","cellClass"],"mappings":"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"}